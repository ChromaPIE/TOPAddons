import com.moandjiezana.toml.Toml

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "com.moandjiezana.toml:toml4j:0.7.2"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"


repositories {
    maven {
        name = "tterag (The One Probe)"
        url = "https://maven.tterrag.com"
    }
    maven {
        name = "covers1624 (RedstoneFlux)"
        url = "http://maven.covers1624.net/"
    }
    maven {
        name = "player (Forestry)"
        url = "http://maven.ic2.player.to"
    }
    maven {
        name = "progwml6 (JEI)"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "dyonovan (Industrial Foregoing)"
        url = "http://dyonovan.com/maven2"
    }
    maven {
        name = "mcmoddev (Tesla-Core-Lib)"
        url = "https://maven.mcmoddev.com"
    }
    maven {
        name = "shadowfacts (Forgelin)"
        url = "http://maven.shadowfacts.net/"
    }
    maven {
        name = "bindray (storagedrawers)"
        url = "https://dl.bintray.com/jaquadro/dev/"
    }
    maven {
        name = "buildcraft (Forestry)"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
        name = "curseforge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {
    // Read dependencies from dependencies.toml and parse each [[dependency]], format in file.
    for (Toml toml : new Toml().read(new File("dependencies.toml")).getTables("dependency")) {
        boolean trans = toml.getBoolean("transitive", true)
        String notation = toml.getString("notation")
        boolean deobf = toml.getBoolean("deobf", false)
        boolean comp = toml.getBoolean("compile", true)
        boolean run = toml.getBoolean("run", true)
        boolean provided = toml.getBoolean("provided", false)
        if (deobf) {
            if (provided) {
                deobfProvided(notation) {
                    transitive = trans
                }
            } else {
                deobfCompile(notation) {
                    transitive = trans
                }
            }
        } else if (comp) {
            if (run) {
                compile(notation) {
                    transitive = trans
                }
            } else {
                compileOnly(notation) {
                    transitive = trans
                }
            }
        } else if (run) {
            runtime(notation) {
                transitive = trans
            }
        } else {
            println("Dependency " + notation + " ignored.")
        }
    }

    // Jar mods in ./libs
//    compile fileTree(dir: 'libs', include: ['*.jar'])
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

version = mc_version + '-' + MAJOR + '.' + MINOR + '.' + PATCH
group = "io.github.drmanganese"
archivesBaseName = "topaddons"

minecraft {
    version = mc_version + '-' + forge_version
    runDir = "run"
    mappings = mcp_mappings

    replace "@VERSION@", project.version
    useDepAts = true
}


processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

sourceSets {
    main {
        java {
            // don't ship debug addon
            exclude "**/addons/debug"
        }
    }
}

jar {
    from "LICENSE"
}

idea { module { inheritOutputDirs = true } }
